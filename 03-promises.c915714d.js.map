{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAAAC,QAAQC,IAAI,aAGMC,SAASC,cAAc,UAAzC,IAEMC,EAAaF,SAASC,cAAc,kBAEpCE,EAAYH,SAASC,cAAc,iBAEnCG,EAASJ,SAASC,cAAc,mBAkBtCD,SAASC,cAAc,SAASI,iBAAiB,UAAU,SAACC,GACxDA,EAAEC,iBACF,IAAIC,EAAW,EACXC,GAASP,EAAWQ,MAKxB,GAJAZ,QAAQC,IAAIU,GACZX,QAAQC,IAAIU,EAAQ,GAGhBL,EAAOM,MAAQ,EAGjB,IAAMC,EAAWC,aAAY,WA1BnC,IAAuBC,EAAUC,EA2BzBhB,QAAQC,IAAIS,GACZV,QAAQC,IAAIU,IA5BGI,EA+BDL,EA/BWM,EA+BDL,EA7BvB,IAAIM,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KAsBIO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAEjBS,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAEvEa,OAAM,SAAAL,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAElBS,EAAA3B,GAAS4B,OAAOI,QAAQ,sBAAuCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAIjEN,KAAcJ,EAAOM,OACvBmB,cAAclB,GACdb,QAAQC,IAAI,8BACZS,EAAW,EACXC,GAASP,EAAWQ,QAGpBD,IAAUN,EAAUO,MACpBF,GAAY,E,IAMhBL,EAAUO,M","sources":["src/js/03-promises.js"],"sourcesContent":["console.log('script go');\nimport Notiflix from 'notiflix';\n\nconst submitBtn = document.querySelector('button');\n//console.log(submitBtn);\nconst firstDelay = document.querySelector('[name=\"delay\"]');\n//console.log(firstDelay);\nconst delayStep = document.querySelector('[name=\"step\"]');\n//console.log(delayStep);\nconst amount = document.querySelector('[name=\"amount\"]');\n//console.log(amount);\n\nfunction createPromise(position, delay) {\n  // Return a promise that resolves or rejects after the specified delay\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Add a submit event listener to the form\ndocument.querySelector('.form').addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n    let position = 1;\n    let delay = +firstDelay.value;\n    console.log(delay);\n    console.log(delay + 1);\n  \n\n    if (amount.value > 0) {\n      \n      // Set up an interval for promise creation and processing\n      const interval = setInterval(() => {\n        console.log(position);\n        console.log(delay);\n          \n        // Create a promise with the current position and delay\n        createPromise(position, delay)\n          .then(({ position, delay }) => {\n            \n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            \n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          })\n                   \n            // Check if the position has reached the specified amount\n            if (position === +amount.value) {\n              clearInterval(interval);\n              console.log('All repetitions completed.');\n              position = 1;\n              delay = +firstDelay.value;\n\n            } else {\n              delay += +delayStep.value;\n              position += 1;\n            }\n           \n            \n            \n          \n      }, +delayStep.value);\n    }\n  });\n\n\n// function createPromise() {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//   if (shouldResolve) {\n//     resolve()\n//   } else {\n//     reject()\n//   }\n// })\n// }\n\n//   document.querySelector('.form').addEventListener(\"submit\", (e) => {\n//     e.preventDefault();\n//     console.log(+firstDelay.value + 100);\n//     console.log(delayStep.value);\n//     console.log(amount.value);\n    \n//     if (amount.value > 0) {\n//       setTimeout(() => { \n//         let positionSetter = 1;\n//         let delaySetter = +firstDelay.value;\n//         const interval = setInterval(() => {\n          \n//           createPromise()\n//           .then(() => {\n//             Notiflix.Notify.success(`✅ Fulfilled promise ${positionSetter} in ${delaySetter}ms`);\n            \n//           })\n//           .catch(() => {\n//             Notiflix.Notify.failure(`❌ Rejected promise ${positionSetter} in ${delaySetter}ms`);\n            \n//           })\n//           .finally(() => {         \n//             if (positionSetter === +amount.value) {\n//               clearInterval(interval);\n//               console.log('All repetitions completed.');\n//             }\n//             positionSetter += 1;\n//             delaySetter += +delayStep.value;\n             \n//           });\n//         }, +delayStep.value)\n//       }, +firstDelay.value)\n//     }\n//   });\n\n\n\n\n\n\n"],"names":["$6JpON","parcelRequire","console","log","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","addEventListener","e","preventDefault","position1","delay1","value","interval","setInterval","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.c915714d.js.map"}